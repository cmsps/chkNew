#!/bin/sh
#
# chkNew [url]/PID [ time ] - check PID was NOT broadcast before time
#                             (time is in getPids format: yyyy/mm/dd-hh:mm)
#
#                             Returns: 0   new programme
#                                      1   repeat
#                                      2-6 problem
#
# Wed Dec 12 18:35:56 GMT 2018
#
<<'______________D__O__C__U__M__E__N__T__A__T__I__O__N_____________'

Copyright (C) 2018 Peter Scott - peterscott@pobox.com

Licence
-------
   This program is free software: you can redistribute it and / or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

Purpose
-------
   This script checks that a BBC programme is not a repeat.
   It works with TV and radio programmes.

Rationale
---------
   It is needed because:

      1) the Beeb has dropped nearly all the '(R)' indicators it used to have
         in the Radio 4 schedule (at least).

      2) repeats are shown in the "Radio Times" and on the programme's
         individual web page but are often unflagged in the shedule.

   The date+time format is the same as that displayed by my `getPids'
   programme.  The idea is that with a date+time from a schedule `chkNew'
   checks for broadcasts before that date.  Without a date it checks
   for broadcasts before today.

   Only the first earlier broadcast is shown.  The Beeb usually has them
   in the correct order so it should be earliest one.

Examples
--------
   $ chkNew m0000sdx 2018/10/21-20:00
   Friday 16:30 - BBC Radio 4
   $ echo $?
   1                         # repeat
   $ chkNew b092m9j6
   Tue 5 Sep 2017 11:30 - BBC Radio 4
   $ chkNew https://www.bbc.co.uk/programmes/b080t87y
   Tue 1 Nov 2016 14:15 - BBC Radio 4
   $ chkNew b0bprgc2 
   $ echo $?
   0                         # NOT a repeat
   $

Bugs
----
   email: peterscott@pobox.com

______________D__O__C__U__M__E__N__T__A__T__I__O__N_____________


# usage - display usage message
#
usage(){
  echo "Usage: $NAME [url/]pid [yyyy/mm/dd-hh:mm]" >&2
  exit 2
}


# mkTmp - make temp dir and delete it automatically on exit or failure
#         Eg: mkTmp; ... > $TMP/temp
#
# Be careful not to exit from a subshell and lose an exit code!
# -------------------------------------------------------------
#
mkTmp(){
  TMP=/tmp/$NAME.$$

  trap 'code=$?; rm -fr $TMP 2> /dev/null; exit $code' EXIT HUP INT QUIT TERM
  mkdir $TMP && return
  echo "$NAME: couldn't make \`$TMP' directory" >&2
  exit 3
}


# prevent the user giving the script a name containing white space
# -- saving the hassle of quoting TMP file names
#
NAME=`basename "$0"`
words=`echo "$NAME" | wc -w`
if [ $words -ne 1 ] ;then
     echo "\`$NAME': I don't allow white space in command names" >&2
     exit 4
fi

# sort out arguments
#
case $# in
  1) pid=$1
     time=`date '+%s'`
     ;;
  2) pid=$1
     time=$2
     case $time in
       [0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]-[0-9][0-9]:[0-9][0-9])
          time=`echo $time |
                  sed 's/-/T/
                       s?/?-?g'`
          time=`date --date $time '+%s'`
          ;;
       *) echo "$NAME: $time isn't yyyy/mm/dd-hh:mm" >&2
          exit 5
     esac
     ;;
  *) usage
esac
case "$pid" in
  */*)
     : ;;
  *)
     pid="https://www.bbc.co.uk/programmes/$pid"
esac

mkTmp

# get page, reformat HTML, and extract Broadcasts section (if any)
#
wget -O $TMP/pid -q $pid
if [ $? -ne 0 ] ;then
     echo "$NAME: couldn't get $pid" >&2
     exit 6
fi
sed '/>[ 	]*</s//>\n</g
    s/^[	 ][	 ]*//' $TMP/pid |
  sed -n '/^<\/div>$/d
          /^<\/a>$/d
          /^<\/li>$/d
          /^<h2>Broadcasts<.h2>$/,/^<\/ul>$/p' > $TMP/broadcasts

# early exit if no Broadcasts section on the page
#
test -s $TMP/broadcasts || exit 0

# look for an earlier broadcast (avoiding exit from a subshell)
#
earlier=$(
  # pass on individual broadcast times and channels
  #
  sed -n '/^<div class="broadcast-event__time beta"/{
                N; N; N; N; N; N; N; N; N
                s/\n//g
                s/.*content="//
                s/">/ /
                s/<a href=[^>]*>/- /
                s/<[^<]*>/ /g
                s/   */ /g
                s/\&amp;/\&/g
                p
           }' $TMP/broadcasts |

    # return details and finish if an earlier broadcast found
    #
    while read date details ;do
         broadcast=`date --date $date '+%s'`
         if [ $broadcast -lt $time ] ;then
              echo $details
              break          # doing exit 1 here would lose the exit code!
         fi
    done
)

# indicate repeat or not
#
if [ -z "$earlier" ] ;then
     exit 0
else
     echo $earlier
     exit 1
fi
